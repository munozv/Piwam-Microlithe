<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Member', 'doctrine');

/**
 * BaseMember
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $lastname
 * @property string $firstname
 * @property string $username
 * @property string $password
 * @property integer $status_id
 * @property date $subscription_date
 * @property boolean $due_exempt
 * @property string $street
 * @property string $zipcode
 * @property string $city
 * @property string $country
 * @property string $picture
 * @property string $email
 * @property string $website
 * @property string $phone_home
 * @property string $phone_mobile
 * @property string $tutor
 * @property integer $state
 * @property integer $association_id
 * @property integer $created_by
 * @property integer $updated_by
 * @property Association $Association
 * @property Status $Status
 * @property Member $CreatedByMember
 * @property Member $UpdatedByMember
 * @property Doctrine_Collection $Debt
 * @property Doctrine_Collection $AclCredential
 * @property Doctrine_Collection $Activity
 * @property Doctrine_Collection $Account
 * @property Doctrine_Collection $Due
 * @property Doctrine_Collection $DueType
 * @property Doctrine_Collection $Expense
 * @property Doctrine_Collection $Member
 * @property Doctrine_Collection $MemberExtraValue
 * @property Doctrine_Collection $Income
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method string              getLastname()          Returns the current record's "lastname" value
 * @method string              getFirstname()         Returns the current record's "firstname" value
 * @method string              getUsername()          Returns the current record's "username" value
 * @method string              getPassword()          Returns the current record's "password" value
 * @method integer             getStatusId()          Returns the current record's "status_id" value
 * @method date                getSubscriptionDate()  Returns the current record's "subscription_date" value
 * @method boolean             getDueExempt()         Returns the current record's "due_exempt" value
 * @method string              getStreet()            Returns the current record's "street" value
 * @method string              getZipcode()           Returns the current record's "zipcode" value
 * @method string              getCity()              Returns the current record's "city" value
 * @method string              getCountry()           Returns the current record's "country" value
 * @method string              getPicture()           Returns the current record's "picture" value
 * @method string              getEmail()             Returns the current record's "email" value
 * @method string              getWebsite()           Returns the current record's "website" value
 * @method string              getPhoneHome()         Returns the current record's "phone_home" value
 * @method string              getPhoneMobile()       Returns the current record's "phone_mobile" value
 * @method string              getTutor()             Returns the current record's "tutor" value
 * @method integer             getState()             Returns the current record's "state" value
 * @method integer             getAssociationId()     Returns the current record's "association_id" value
 * @method integer             getCreatedBy()         Returns the current record's "created_by" value
 * @method integer             getUpdatedBy()         Returns the current record's "updated_by" value
 * @method Association         getAssociation()       Returns the current record's "Association" value
 * @method Status              getStatus()            Returns the current record's "Status" value
 * @method Member              getCreatedByMember()   Returns the current record's "CreatedByMember" value
 * @method Member              getUpdatedByMember()   Returns the current record's "UpdatedByMember" value
 * @method Doctrine_Collection getDebt()              Returns the current record's "Debt" collection
 * @method Doctrine_Collection getAclCredential()     Returns the current record's "AclCredential" collection
 * @method Doctrine_Collection getActivity()          Returns the current record's "Activity" collection
 * @method Doctrine_Collection getAccount()           Returns the current record's "Account" collection
 * @method Doctrine_Collection getDue()               Returns the current record's "Due" collection
 * @method Doctrine_Collection getDueType()           Returns the current record's "DueType" collection
 * @method Doctrine_Collection getExpense()           Returns the current record's "Expense" collection
 * @method Doctrine_Collection getMember()            Returns the current record's "Member" collection
 * @method Doctrine_Collection getMemberExtraValue()  Returns the current record's "MemberExtraValue" collection
 * @method Doctrine_Collection getIncome()            Returns the current record's "Income" collection
 * @method Member              setId()                Sets the current record's "id" value
 * @method Member              setLastname()          Sets the current record's "lastname" value
 * @method Member              setFirstname()         Sets the current record's "firstname" value
 * @method Member              setUsername()          Sets the current record's "username" value
 * @method Member              setPassword()          Sets the current record's "password" value
 * @method Member              setStatusId()          Sets the current record's "status_id" value
 * @method Member              setSubscriptionDate()  Sets the current record's "subscription_date" value
 * @method Member              setDueExempt()         Sets the current record's "due_exempt" value
 * @method Member              setStreet()            Sets the current record's "street" value
 * @method Member              setZipcode()           Sets the current record's "zipcode" value
 * @method Member              setCity()              Sets the current record's "city" value
 * @method Member              setCountry()           Sets the current record's "country" value
 * @method Member              setPicture()           Sets the current record's "picture" value
 * @method Member              setEmail()             Sets the current record's "email" value
 * @method Member              setWebsite()           Sets the current record's "website" value
 * @method Member              setPhoneHome()         Sets the current record's "phone_home" value
 * @method Member              setPhoneMobile()       Sets the current record's "phone_mobile" value
 * @method Member              setTutor()             Sets the current record's "tutor" value
 * @method Member              setState()             Sets the current record's "state" value
 * @method Member              setAssociationId()     Sets the current record's "association_id" value
 * @method Member              setCreatedBy()         Sets the current record's "created_by" value
 * @method Member              setUpdatedBy()         Sets the current record's "updated_by" value
 * @method Member              setAssociation()       Sets the current record's "Association" value
 * @method Member              setStatus()            Sets the current record's "Status" value
 * @method Member              setCreatedByMember()   Sets the current record's "CreatedByMember" value
 * @method Member              setUpdatedByMember()   Sets the current record's "UpdatedByMember" value
 * @method Member              setDebt()              Sets the current record's "Debt" collection
 * @method Member              setAclCredential()     Sets the current record's "AclCredential" collection
 * @method Member              setActivity()          Sets the current record's "Activity" collection
 * @method Member              setAccount()           Sets the current record's "Account" collection
 * @method Member              setDue()               Sets the current record's "Due" collection
 * @method Member              setDueType()           Sets the current record's "DueType" collection
 * @method Member              setExpense()           Sets the current record's "Expense" collection
 * @method Member              setMember()            Sets the current record's "Member" collection
 * @method Member              setMemberExtraValue()  Sets the current record's "MemberExtraValue" collection
 * @method Member              setIncome()            Sets the current record's "Income" collection
 * 
 * @package    piwam
 * @subpackage model
 * @author     Adrien Mogenet
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMember extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('piwam_member');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('lastname', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('firstname', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('status_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('subscription_date', 'date', 25, array(
             'type' => 'date',
             'notnull' => true,
             'length' => 25,
             ));
        $this->hasColumn('due_exempt', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('street', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('zipcode', 'string', 8, array(
             'type' => 'string',
             'length' => 8,
             ));
        $this->hasColumn('city', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('country', 'string', 8, array(
             'type' => 'string',
             'length' => 8,
             ));
        $this->hasColumn('picture', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('website', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('phone_home', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             ));
        $this->hasColumn('phone_mobile', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             ));
        $this->hasColumn('tutor', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             ));
        $this->hasColumn('state', 'integer', 1, array(
             'type' => 'integer',
             'default' => '1',
             'notnull' => true,
             'length' => 1,
             ));
        $this->hasColumn('association_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('created_by', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('updated_by', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Association', array(
             'local' => 'association_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Status', array(
             'local' => 'status_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Member as CreatedByMember', array(
             'local' => 'created_by',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Member as UpdatedByMember', array(
             'local' => 'updated_by',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Debt', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('AclCredential', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('Activity', array(
             'local' => 'id',
             'foreign' => 'created_by'));

        $this->hasMany('Account', array(
             'local' => 'id',
             'foreign' => 'created_by'));

        $this->hasMany('Due', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('DueType', array(
             'local' => 'id',
             'foreign' => 'created_by'));

        $this->hasMany('Expense', array(
             'local' => 'id',
             'foreign' => 'created_by'));

        $this->hasMany('Member', array(
             'local' => 'id',
             'foreign' => 'created_by'));

        $this->hasMany('MemberExtraValue', array(
             'local' => 'id',
             'foreign' => 'member_id'));

        $this->hasMany('Income', array(
             'local' => 'id',
             'foreign' => 'created_by'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}